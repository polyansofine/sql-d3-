{"version":3,"sources":["view/LogPage.js"],"names":["columns","id","label","minWidth","LogPage","React","page","setPage","rowsPerPage","setRowsPerPage","rows","setRows","dispatch","useDispatch","logs","useSelector","log","logActions","tempData","length","map","item","index","push","times","code","description","connection","time","moment","format","createData","sx","m","width","overflow","maxHeight","stickyHeader","column","align","style","slice","row","hover","role","tabIndex","value","color","display","alignItems","justifyContent","height","variant","rowsPerPageOptions","component","count","onPageChange","event","newPage","onRowsPerPageChange","target"],"mappings":"qSAcMA,EAAU,CACd,CACEC,GAAI,OACJC,MAAO,OACPC,SAAU,KAEZ,CACEF,GAAI,aACJC,MAAO,aACPC,SAAU,KAEZ,CACEF,GAAI,cACJC,MAAO,cACPC,SAAU,MAiCC,SAASC,IACtB,MAAwBC,WAAe,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,WAAe,IAArD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAwBJ,WAAe,IAAvC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAWC,cACXC,EAAOC,aAAY,qBAAGD,KAAgBE,OAC5CX,aAAgB,WACdO,EAASK,SACR,IACHZ,aAAgB,WACd,IAAIa,EAAW,GACfJ,EAAKK,OAAS,GACZL,EAAKM,KAAI,SAACC,EAAMC,GACdJ,EAASK,KAnBjB,SAAoBC,EAAOC,EAAMC,GAC/B,IAAIC,EAAaF,EAAO,IAAM,QAAU,UAExC,MAAO,CAAEG,KADEC,IAAOL,GAAOM,OAAO,oBACjBH,aAAYD,eAgBPK,CAAWV,EAAKO,KAAMP,EAAKI,KAAMJ,EAAKK,iBAExDf,EAAQO,KACP,CAACJ,IAWJ,OACE,cAAC,IAAD,CAAKkB,GAAI,CAAEC,EAAG,GAAd,SACE,eAAC,IAAD,CAAOD,GAAI,CAAEE,MAAO,OAAQC,SAAU,UAAtC,UACE,cAAC,IAAD,CAAgBH,GAAI,CAAEI,UAAW,KAAjC,SACE,eAAC,IAAD,CAAOC,cAAY,EAAC,aAAW,eAA/B,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACGrC,EAAQoB,KAAI,SAACkB,GAAD,OACX,cAAC,IAAD,CAEEC,MAAOD,EAAOC,MACdC,MAAO,CAAErC,SAAUmC,EAAOnC,UAH5B,SAKGmC,EAAOpC,OAJHoC,EAAOrC,WASpB,cAAC,IAAD,UACGS,EAAKS,OAAS,EACbT,EACG+B,MAAMnC,EAAOE,EAAaF,EAAOE,EAAcA,GAC/CY,KAAI,SAACsB,GACJ,OACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAK,WACLC,UAAW,EAHb,SAMG7C,EAAQoB,KAAI,SAACkB,GACZ,IAAMQ,EAAQJ,EAAIJ,EAAOrC,IACzB,OACE,cAAC,IAAD,CAEE+B,GAAI,CACFe,MACuB,SAArBL,EAAG,WACC,MACA,SAERH,MAAOD,EAAOC,MARhB,SAUGD,EAAOR,QAA2B,kBAAVgB,EACrBR,EAAOR,OAAOgB,GACdA,GAXCR,EAAOrC,QANbyC,EAAIjB,SAyBjB,cAAC,IAAD,CACEe,MAAO,CACLQ,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,QALZ,SAQE,cAAC,IAAD,CAAYC,QAAQ,KAApB,8BAMV,cAAC,IAAD,CACEC,mBAAoB,CAAC,GAAI,GAAI,KAC7BC,UAAU,MACVC,MAAO7C,EAAKS,OACZX,YAAaA,EACbF,KAAMA,EACNkD,aAlFiB,SAACC,EAAOC,GAC/BnD,EAAQmD,IAkFFC,oBA/EwB,SAACF,GAC/BhD,GAAgBgD,EAAMG,OAAOd,OAC7BvC,EAAQ","file":"static/js/10.13e8b3d7.chunk.js","sourcesContent":["import * as React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as logActions from \"../store/actions\";\nimport moment from \"moment\";\nimport { Box, Typography } from \"@mui/material\";\n\nconst columns = [\n  {\n    id: \"time\",\n    label: \"TIME\",\n    minWidth: 150,\n  },\n  {\n    id: \"connection\",\n    label: \"CONNECTION\",\n    minWidth: 100,\n  },\n  {\n    id: \"description\",\n    label: \"DESCRIPTION\",\n    minWidth: 200,\n  },\n  // { id: \"name\", label: \"Name\", minWidth: 170 },\n  // { id: \"code\", label: \"ISO\\u00a0Code\", minWidth: 100 },\n  // {\n  //   id: \"population\",\n  //   label: \"Population\",\n  //   minWidth: 170,\n  //   align: \"right\",\n  //   format: (value) => value.toLocaleString(\"en-US\"),\n  // },\n  // {\n  //   id: \"size\",\n  //   label: \"Size\\u00a0(km\\u00b2)\",\n  //   minWidth: 170,\n  //   align: \"right\",\n  //   format: (value) => value.toLocaleString(\"en-US\"),\n  // },\n  // {\n  //   id: \"density\",\n  //   label: \"Density\",\n  //   minWidth: 170,\n  //   align: \"right\",\n  //   format: (value) => value.toFixed(2),\n  // },\n];\n\nfunction createData(times, code, description) {\n  let connection = code > 100 ? \"Error\" : \"Connect\";\n  let time = moment(times).format(\"YYYY-MM-DD hh:mm\");\n  return { time, connection, description };\n}\n\nexport default function LogPage() {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [rows, setRows] = React.useState([]);\n  const dispatch = useDispatch();\n  const logs = useSelector(({ logs }) => logs.log);\n  React.useEffect(() => {\n    dispatch(logActions.getLogs());\n  }, []);\n  React.useEffect(() => {\n    let tempData = [];\n    logs.length > 0 &&\n      logs.map((item, index) => {\n        tempData.push(createData(item.time, item.code, item.description));\n      });\n    setRows(tempData);\n  }, [logs]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Box sx={{ m: 4 }}>\n      <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n        <TableContainer sx={{ maxHeight: 440 }}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell\n                    key={column.id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.length > 0 ? (\n                rows\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row) => {\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row.code}\n                      >\n                        {columns.map((column) => {\n                          const value = row[column.id];\n                          return (\n                            <TableCell\n                              key={column.id}\n                              sx={{\n                                color:\n                                  row[\"connection\"] == \"Error\"\n                                    ? \"red\"\n                                    : \"black\",\n                              }}\n                              align={column.align}\n                            >\n                              {column.format && typeof value === \"number\"\n                                ? column.format(value)\n                                : value}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })\n              ) : (\n                <Box\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    height: \"30vh\",\n                  }}\n                >\n                  <Typography variant=\"h4\">No data</Typography>\n                </Box>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[10, 25, 100]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </Box>\n  );\n}\n"],"sourceRoot":""}
{"version":3,"sources":["component/ChartContent/ChartContent.js","view/ChartPage.js"],"names":["ChartContent","props","useRef","useState","useEffect","am4core","am4themes_material","am4themes_animated","chart","sort","am4charts","dateFormatter","dateFormat","data","chartData","values","map","record_id","value_light","Date","parse","value_temp","value_sound","value_humidity","console","log","generatechartData","dateAxis","xAxes","push","title","text","valueAxis","yAxes","range","range2","range4","series","dataFields","valueY","fill","stroke","dateX","strokeWidth","tooltipText","fillOpacity","axisRanges","create","value","limit","t_day_threshold","grid","strokeOpacity","t_night_threshold","t_alert_threshold","h_day_threshold","h_night_threshold","h_alert_threshold","l_day_threshold","l_night_threshold","l_alert_threshold","s_day_threshold","s_night_threshold","s_alert_threshold","cursor","xAxis","scrollbarX","tooltip","getFillFromObject","adapter","add","x","target","tooltipDataItem","background","colors","getIndex","id","style","minHeight","height","ChartPage","useDispatch","sqlData","useSelector","Header","length","Box","display","alignItems","justifyContent","Typography","variant"],"mappings":"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","file":"static/js/9.4293b83d.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4themes_material from \"@amcharts/amcharts4/themes/material\";\n\n// interface LineChartData {\n//   d: string;\n//   v: number;\n// }\n\n// interface LineChartProps {\n//   height: number;\n//   values: LineChartData[];\n// }\n\nconst ChartContent = (props) => {\n  const divRef = useRef(null);\n  const [graphHeight, setGraphData] = useState(0);\n\n  useEffect(() => {\n    /* Chart code */\n    // Themes begin\n    am4core.useTheme(am4themes_material);\n    am4core.useTheme(am4themes_animated);\n    // Themes end\n\n    // Create chart instance\n    let chart = am4core.create(props.sort, am4charts.XYChart);\n\n    chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\n\n    // Add data\n    chart.data = generatechartData();\n\n    /**\n     * Use separate DateFormatter for X axis, so we can set different format\n     * (this presumes that X axis of type DateAxis was already created)\n     */\n\n    function generatechartData() {\n      let chartData = [];\n      if (props.sort == \"value_light\") {\n        chartData = props.values?.map(({ record_id, value_light }) => ({\n          record_id: new Date(Date.parse(record_id)),\n          value_light,\n        }));\n      }\n      if (props.sort == \"value_temp\") {\n        chartData = props.values?.map(({ record_id, value_temp }) => ({\n          record_id: new Date(Date.parse(record_id)),\n          value_temp,\n        }));\n      }\n      if (props.sort == \"value_sound\") {\n        chartData = props.values?.map(({ record_id, value_sound }) => ({\n          record_id: new Date(Date.parse(record_id)),\n          value_sound,\n        }));\n      }\n      if (props.sort == \"value_humidity\") {\n        chartData = props.values?.map(({ record_id, value_humidity }) => ({\n          record_id: new Date(Date.parse(record_id)),\n          value_humidity,\n        }));\n      }\n      // let firstDate = new Date();\n      // firstDate.setDate(firstDate.getDate() - 150);\n      // let visits = -40;\n      // let b = 0.6;\n      // for (var i = 0; i < 150; i++) {\n      //   // we create date objects here. In your data, you can have date strings\n      //   // and then set format of your dates using chart.dataDateFormat property,\n      //   // however when possible, use date objects, as this will speed up chart rendering.\n      //   let newDate = new Date(firstDate);\n      //   newDate.setDate(newDate.getDate() + i);\n      //   if (i > 80) {\n      //     b = 0.4;\n      //   }\n      //   visits += Math.round((Math.random() < b ? 1 : -1) * Math.random() * 10);\n\n      console.log(\"chartdata=\", chartData);\n      return chartData;\n    }\n\n    // Create axes\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.dateFormatter = new am4core.DateFormatter();\n    dateAxis.title.text = \"Time\";\n    // dateAxis.startLocation = 0.5;\n    // dateAxis.endLocation = 0.5;\n\n    // Create value axis\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.title.text = `${props.sort}`;\n\n    // Create series\n    let series = chart.series.push(new am4charts.LineSeries());\n    if (props.sort == \"value_temp\") {\n      series.dataFields.valueY = \"value_temp\";\n      series.fill = am4core.color(\"#e07a5f\");\n      series.stroke = am4core.color(\"#e07a5f\");\n    }\n    if (props.sort == \"value_humidity\") {\n      series.dataFields.valueY = \"value_humidity\";\n      series.fill = am4core.color(\"#00b4d8\");\n      series.stroke = am4core.color(\"#00b4d8\");\n    }\n    if (props.sort == \"value_light\") {\n      series.dataFields.valueY = \"value_light\";\n      series.fill = am4core.color(\"#fca311\");\n      series.stroke = am4core.color(\"#fca311\");\n    }\n    if (props.sort == \"value_sound\") {\n      series.dataFields.valueY = \"value_sound\";\n      series.fill = am4core.color(\"#583101\");\n      series.stroke = am4core.color(\"#583101\");\n    }\n    series.dataFields.dateX = \"record_id\";\n    series.strokeWidth = 1.5;\n    series.tooltipText = \"{dateX}  :  [b]{valueY.value}[/]\";\n    series.fillOpacity = 0.1;\n\n    // Create a range to change stroke for values below 0\n    // let range = valueAxis.createSeriesRange(series);\n    if (props.sort == \"value_temp\") {\n      var range = valueAxis.axisRanges.create();\n      range.value = props.limit[0].t_day_threshold;\n      // range.value = 1000;\n      range.grid.stroke = am4core.color(\"#ffc300\");\n      range.grid.strokeWidth = 1.5;\n      range.grid.strokeOpacity = 1;\n\n      var range2 = valueAxis.axisRanges.create();\n      range2.value = props.limit[0].t_night_threshold;\n      range2.grid.stroke = am4core.color(\"#000814\");\n      range2.grid.strokeWidth = 1.5;\n      range2.grid.strokeOpacity = 1;\n      var range4 = valueAxis.axisRanges.create();\n      range4.value = props.limit[0].t_alert_threshold;\n      range4.grid.stroke = am4core.color(\"#d00000\");\n      range4.grid.strokeWidth = 1.5;\n      range4.grid.strokeOpacity = 1;\n\n      // range4.contents.stroke = am4core.color(\"#000814\");\n      // range4.contents.fill = range4.contents.stroke;\n      // range4.contents.strokeOpacity = 0.9;\n      // range4.contents.fillOpacity = 0.3;\n    }\n    if (props.sort == \"value_humidity\") {\n      var range = valueAxis.axisRanges.create();\n      range.value = props.limit[0].h_day_threshold;\n      // range.value = 1000;\n      range.grid.stroke = am4core.color(\"#ffc300\");\n      range.grid.strokeWidth = 1.5;\n      range.grid.strokeOpacity = 1;\n\n      var range2 = valueAxis.axisRanges.create();\n      range2.value = props.limit[0].h_night_threshold;\n      range2.grid.stroke = am4core.color(\"#000814\");\n      range2.grid.strokeWidth = 1.5;\n      range2.grid.strokeOpacity = 1;\n      var range4 = valueAxis.axisRanges.create();\n      range4.value = props.limit[0].h_alert_threshold;\n      range4.grid.stroke = am4core.color(\"#d00000\");\n      range4.grid.strokeWidth = 1.5;\n      range4.grid.strokeOpacity = 1;\n    }\n    if (props.sort == \"value_light\") {\n      var range = valueAxis.axisRanges.create();\n      range.value = props.limit[0].l_day_threshold;\n      // range.value = 1000;\n      range.grid.stroke = am4core.color(\"#ffc300\");\n      range.grid.strokeWidth = 1.5;\n      range.grid.strokeOpacity = 1;\n\n      var range2 = valueAxis.axisRanges.create();\n      range2.value = props.limit[0].l_night_threshold;\n      range2.grid.stroke = am4core.color(\"#000814\");\n      range2.grid.strokeWidth = 1.5;\n      range2.grid.strokeOpacity = 1;\n      var range4 = valueAxis.axisRanges.create();\n      range4.value = props.limit[0].l_alert_threshold;\n      range4.grid.stroke = am4core.color(\"#d00000\");\n      range4.grid.strokeWidth = 1.5;\n      range4.grid.strokeOpacity = 1;\n    }\n    if (props.sort == \"value_sound\") {\n      var range = valueAxis.axisRanges.create();\n      range.value = props.limit[0].s_day_threshold;\n      // range.value = 1000;\n      range.grid.stroke = am4core.color(\"#ffc300\");\n      range.grid.strokeWidth = 1.5;\n      range.grid.strokeOpacity = 1;\n\n      var range2 = valueAxis.axisRanges.create();\n      range2.value = props.limit[0].s_night_threshold;\n      range2.grid.stroke = am4core.color(\"#000814\");\n      range2.grid.strokeWidth = 1.5;\n      range2.grid.strokeOpacity = 1;\n      var range4 = valueAxis.axisRanges.create();\n      range4.value = props.limit[0].s_alert_threshold;\n      range4.grid.stroke = am4core.color(\"#d00000\");\n      range4.grid.strokeWidth = 1.5;\n      range4.grid.strokeOpacity = 1;\n    }\n\n    // Add cursor\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.xAxis = dateAxis;\n    chart.scrollbarX = new am4core.Scrollbar();\n\n    series.tooltip.getFillFromObject = false;\n    if (props.sort == \"value_temp\") {\n      series.tooltip.adapter.add(\"x\", (x, target) => {\n        if (\n          series.tooltip.tooltipDataItem.valueY <\n          props.limit[0].t_alert_threshold\n        ) {\n          series.tooltip.background.fill = chart.colors.getIndex(7);\n        } else {\n          series.tooltip.background.fill = chart.colors.getIndex(0);\n        }\n        return x;\n      });\n    }\n    if (props.sort == \"value_sound\") {\n      series.tooltip.adapter.add(\"x\", (x, target) => {\n        if (\n          series.tooltip.tooltipDataItem.valueY <\n          props.limit[0].s_alert_threshold\n        ) {\n          series.tooltip.background.fill = chart.colors.getIndex(7);\n        } else {\n          series.tooltip.background.fill = chart.colors.getIndex(0);\n        }\n        return x;\n      });\n    }\n    if (props.sort == \"value_humidity\") {\n      series.tooltip.adapter.add(\"x\", (x, target) => {\n        if (\n          series.tooltip.tooltipDataItem.valueY <\n          props.limit[0].h_alert_threshold\n        ) {\n          series.tooltip.background.fill = chart.colors.getIndex(7);\n        } else {\n          series.tooltip.background.fill = chart.colors.getIndex(0);\n        }\n        return x;\n      });\n    }\n    if (props.sort == \"value_light\") {\n      series.tooltip.adapter.add(\"x\", (x, target) => {\n        if (\n          series.tooltip.tooltipDataItem.valueY <\n          props.limit[0].l_alert_threshold\n        ) {\n          series.tooltip.background.fill = chart.colors.getIndex(7);\n        } else {\n          series.tooltip.background.fill = chart.colors.getIndex(0);\n        }\n        return x;\n      });\n    }\n  }, [props.value, props]);\n  // const handleChange = (event, newAlignment) => {\n  //   setSort(newAlignment);\n  // };\n  return (\n    <>\n      {/* <ToggleButtonGroup\n        color=\"primary\"\n        value={sort}\n        exclusive\n        onChange={handleChange}\n      >\n        <ToggleButton value=\"value_temp\">Temperature</ToggleButton>\n        <ToggleButton value=\"value_humidity\">Humidity</ToggleButton>\n        <ToggleButton value=\"value_light\">Light</ToggleButton>\n        <ToggleButton value=\"value_sound\">Sound</ToggleButton>\n      </ToggleButtonGroup> */}\n      <div id={`${props.sort}`} style={{ minHeight: props.height }}></div>\n    </>\n  );\n};\n\nexport default ChartContent;\n","import { Box, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ChartContent from \"../component/ChartContent/ChartContent\";\nimport Header from \"../component/Header\";\nimport * as chartActions from \"../store/actions\";\n\nexport default function ChartPage() {\n  const dispatch = useDispatch();\n  const sqlData = useSelector(({ chart }) => chart.data);\n  const limit = useSelector(({ chart }) => chart.limit);\n  console.log(\"helloHchart page\");\n\n  // useEffect(() => {\n  //   async function getData() {\n  //     dispatch(chartActions.getDatas());\n  //   }\n  //   getData();\n  // }, []);\n\n  return (\n    <div>\n      <Header />\n      {sqlData.length > 0 ? (\n        <>\n          <ChartContent\n            height={400}\n            sort=\"value_temp\"\n            values={sqlData}\n            limit={limit}\n          />\n          <ChartContent\n            height={400}\n            sort=\"value_humidity\"\n            values={sqlData}\n            limit={limit}\n          />\n          <ChartContent\n            height={400}\n            sort=\"value_light\"\n            values={sqlData}\n            limit={limit}\n          />\n          <ChartContent\n            height={400}\n            sort=\"value_sound\"\n            values={sqlData}\n            limit={limit}\n          />\n        </>\n      ) : (\n        // [\"value_temp\", \"value_humidity\", \"value_light\", \"value_sound\"].map(\n        //   (item, index) => (\n\n        // )\n\n        <Box\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: \"60vh\",\n          }}\n        >\n          <Typography variant=\"h4\">No data</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}